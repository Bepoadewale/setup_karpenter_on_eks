name: CI/CD Pipeline for EKS Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout Code
      uses: actions/checkout@v2

    # Step 2: Set up AWS CLI
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 3: Build Docker Image
    - name: Build Docker Image
      run: |
        docker build -t html-app:latest .
        docker tag html-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/html-app:latest

    # Step 4: Push Docker Image to Amazon ECR
    - name: Push Docker Image to ECR
      run: |
        REPO_NAME="html-app"
        REGION="us-east-1"
        ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"

        # Check if ECR repo exists before creating
        if ! aws ecr describe-repositories --repository-names "$REPO_NAME" --region "$REGION" > /dev/null 2>&1; then
          echo "Creating ECR repository: $REPO_NAME"
          aws ecr create-repository --repository-name "$REPO_NAME" --region "$REGION"
        else
          echo "ECR repository $REPO_NAME already exists"
        fi

        # Login and push the image
        aws ecr get-login-password --region "$REGION" | docker login --username AWS --password-stdin "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"
        docker push "$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME:latest"

    # Step 5: Install Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.0

    # Step 6: Ensure DynamoDB Lock Table Exists
    - name: Create DynamoDB Lock Table (If Not Exists)
      run: |
        TABLE_NAME="terraform-locks"
        REGION="us-east-1"

        if ! aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" > /dev/null 2>&1; then
          echo "Creating DynamoDB table: $TABLE_NAME"
          aws dynamodb create-table \
            --table-name "$TABLE_NAME" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region "$REGION"
        else
          echo "DynamoDB table $TABLE_NAME already exists"
        fi

    # Step 7: Terraform Init & Apply (Provision EKS)
    - name: Terraform Init & Apply
      working-directory: ./terraform
      run: |
        terraform init
        terraform apply -auto-approve

    # Step 8: Set Up kubectl for EKS
    - name: Set up kubectl
      run: |
        aws eks --region us-east-1 update-kubeconfig --name my-eks-cluster

    # Step 9: Deploy to EKS
    - name: Deploy to EKS
      run: |
        kubectl apply -f k8s/deployment.yml
        kubectl apply -f k8s/service.yml
        aws eks --region us-east-1 update-kubeconfig --name my-eks-cluster